@using Menza.Shared
@inject AuthService AuthService;
@inject IJSRuntime JsRuntime;
@inject NextMenuService NextMenuService;
@inject VoteService VoteService;
@inject MenuService MenuService;

<div style="height: 100%; padding: 50vh 0" @ref="_list" id="list">
    @if (_all != null)
    {
        @foreach (MenuAndVotes menu in _all)
        {
            bool isNext = menu.Date == NextMenuService.NextMenu.Date;
            <MenuView
                Menu="@menu"
                Rendered="@(isNext ? OnNextMenuRendered : null)"
                IsNext="@isNext"
                OnVote="@OnVote"/>
        }
    }
</div>

<ScrollToNextMenuButton />

<About />

<Popup
    Close="@(() => { _isSigningIn = false; StateHasChanged(); })"
    IsVisible="@(_isSigningIn && AuthService.AccessToken == null)">
    <SignInMenu />
</Popup>


@code {
    private ElementReference _list;
    private bool _isSigningIn;

    private List<MenuAndVotes>? _all;

    protected override void OnInitialized()
    {
        AuthService.TokenChanged += () => InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        _all = await MenuService.GetAll();
    }

    public async void OnVote(Vote vote)
    {
        if (AuthService.AccessToken == null)
        {
            _isSigningIn = true;
            StateHasChanged();
            return;
        }
        await VoteService.Vote(vote);
        _all = await MenuService.GetAll();
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("window.onscroll", null);
    }

    private void OnNextMenuRendered(ElementReference elementReference)
    {
        _ = JsRuntime.InvokeVoidAsync("takeOver", elementReference);
        Console.WriteLine("Next menu rendered");
    }
}