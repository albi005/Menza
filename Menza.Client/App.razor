@using Menza.Shared
@inject IJSRuntime JsRuntime;
@inject IRepository Repository;
@inject PersistentComponentState ApplicationState;
@inject IServiceProvider ServiceProvider;

@implements IDisposable

<div style="height: 100%; padding: 50vh 0" @ref="_list" id="list">
    @if (_all != null)
    {
        @foreach (MenuAndRating menu in _all)
        {
            bool isNext = menu == _nextMenu;
            <MenuView
                IsPrerendering="@_isPrerendering"
                Menu="@menu"
                IsNext="@isNext"
                SaveRating="@SaveRating"/>
        }
    }
</div>

@if (!_isPrerendering)
{
    <ScrollToNextMenuButton />

    <About />

    <Popup
        Close="@(() => { _isSigningIn = false; StateHasChanged(); })"
        IsVisible="@(_isSigningIn && !_authService.IsAuthenticated)">
        <SignInMenu />
    </Popup>
}

@code {
    private ElementReference _list;
    private MenuAndRating? _nextMenu;
    private bool _isSigningIn;
    private bool _isPrerendering = true;
    private PersistingComponentStateSubscription _subscription;
    private AuthService _authService = null!;

    private List<MenuAndRating>? _all;

    protected override void OnInitialized()
    {
        _subscription = ApplicationState.RegisterOnPersisting(() =>
        {
            ApplicationState.PersistAsJson(nameof(IRepository.GetAll), _all);
            return Task.CompletedTask;
        });

        if (!ApplicationState.TryTakeFromJson<List<MenuAndRating>?>(nameof(IRepository.GetAll), out var prerendered))
            return;
        
        _isPrerendering = false;
        _authService = ServiceProvider.GetRequiredService<AuthService>();
        _authService.Changed += async () =>
        {
            bool justSignedIn = _isSigningIn && _authService.IsAuthenticated;
            _isSigningIn = false;
            _ = InvokeAsync(StateHasChanged);
            
            if (!justSignedIn)
                return;
            Console.WriteLine("Just signed in");
            _all = await Repository.GetAll();
            _ = InvokeAsync(StateHasChanged);
        };
        _all = ServiceProvider.GetRequiredService<StartupService>().Menus ?? prerendered;
        _nextMenu = _all?.FirstOrDefault(m => m.Date >= DateOnly.FromDateTime(DateTime.Now));
    }

    protected override async Task OnInitializedAsync()
    {
        if (_isPrerendering || _authService.IsAuthenticated && _all == null)
            _all = await Repository.GetAll();
        
        _nextMenu = _all?.FirstOrDefault(m => m.Date >= DateOnly.FromDateTime(DateTime.Now));
    }

    private bool SaveRating(Rating rating)
    {
        if (!_authService.IsAuthenticated)
        {
            _isSigningIn = true;
            StateHasChanged();
            return false;
        }
        StateHasChanged();
        _ = JsRuntime.InvokeVoidAsync("window.onscroll", null);
        _ = Repository.Rate(rating);
        return true;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        _ = JsRuntime.InvokeVoidAsync("takeOver");
        return base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose() => _subscription.Dispose();
}