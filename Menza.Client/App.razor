@using Menza.Shared
@inject IJSRuntime JsRuntime;
@inject IRepository Repository;
@inject PersistentComponentState ApplicationState;
@inject IServiceProvider ServiceProvider;
@implements IDisposable

<div style="height: 100%; padding: 50vh 0" @ref="_list" id="list">
    @if (_all != null)
    {
        @foreach (MenuAndRating menu in _all)
        {
            bool isNext = menu == _nextMenu;
            <MenuView
                Menu="@menu"
                IsNext="@isNext"
                SaveRating="@Rate"/>
        }
    }
</div>

@if (!_isPrerendering)
{
    <ScrollToNextMenuButton />

    <About />

    <Popup
        Close="@(() => { _isSigningIn = false; StateHasChanged(); })"
        IsVisible="@(_isSigningIn && !_authService.IsAuthenticated)">
        <SignInMenu />
    </Popup>
}

@code {
    private ElementReference _list;
    private MenuAndRating? _nextMenu;
    private bool _isSigningIn;
    private bool _isPrerendering = true;
    private PersistingComponentStateSubscription _subscription;
    private AuthService _authService = null!;

    private List<MenuAndRating>? _all;

    protected override void OnInitialized()
    {
        _subscription = ApplicationState.RegisterOnPersisting(Persist);

        if (!ApplicationState.TryTakeFromJson<List<MenuAndRating>?>(nameof(IRepository.GetAll), out var stored))
            return;
        
        _isPrerendering = false;
        _authService = ServiceProvider.GetRequiredService<AuthService>();
        _authService.Changed += () => InvokeAsync(StateHasChanged);
        _all = stored;
        _nextMenu = _all?.FirstOrDefault(m => m.Date >= DateOnly.FromDateTime(DateTime.Now));
    }

    protected override async Task OnInitializedAsync()
    {
        if (_isPrerendering || _authService.IsAuthenticated)
            _all = await Repository.GetAll();
        
        _nextMenu = _all?.FirstOrDefault(m => m.Date >= DateOnly.FromDateTime(DateTime.Now));
    }

    private Task Persist()
    {
        ApplicationState.PersistAsJson(nameof(IRepository.GetAll), _all);
        return Task.CompletedTask;
    }

    private async void Rate(Rating rating)
    {
        if (!_authService.IsAuthenticated)
        {
            _isSigningIn = true;
            StateHasChanged();
            return;
        }
        await Repository.Rate(rating);
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("window.onscroll", null);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        _ = JsRuntime.InvokeVoidAsync("takeOver");
        return base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose() => _subscription.Dispose();
}