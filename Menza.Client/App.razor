@using Menza.Shared
@inject AuthService AuthService;
@inject IJSRuntime JsRuntime;
@inject NextMenuService NextMenuService;
@inject VoteService VoteService;
@inject MenuService MenuService;

<div style="height: 100%; padding: 50vh 0" @ref="_list" id="list">
    @if (_all != null)
    {
        @for (int i = 0; i < _all.Count; i++)
        {
            MenuAndVotes menu = _all[i];
            bool selected = i == _selectedIndex;
            bool isNext = menu.Date == NextMenuService.NextMenu.Date;
            bool isVisible = _visibleIndexes.Contains(i);
            <MenuView
                Menu="@menu"
                Rendered="@(isNext ? elementReference => _next = elementReference : null)"
                IsNext="@isNext"
                Selected="@selected"
                LabelHeight="@(_labelHeights?[i])"
                ContentHeight="@(_contentHeights?[i])"
                IsVisible="@isVisible"
                OnVote="OnVote"/>
        }
    }
</div>

<Popup
    Close="@(() => { _isSigningIn = false; StateHasChanged(); })"
    IsVisible="@(_isSigningIn && AuthService.IdToken == null)">
    <SignInMenu />
</Popup>

<About />

@code {
    private ElementReference _list;
    private ElementReference _next;
    private bool _isSecondRender = true;
    private DotNetObjectReference<App>? _dotNetObjectReference;
    private double[]? _labelHeights;
    private double[]? _contentHeights;
    private int _selectedIndex;
    private int[] _visibleIndexes = Array.Empty<int>();
    private bool _isSigningIn;

    private List<MenuAndVotes>? _all;

    protected override void OnInitialized()
    {
        _dotNetObjectReference = DotNetObjectReference.Create(this);
        AuthService.TokenChanged += () => InvokeAsync(StateHasChanged);
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender || !_isSecondRender || _all == null) return;
        _isSecondRender = false;
        await JsRuntime.InvokeVoidAsync("subscribe", _dotNetObjectReference);
        await JsRuntime.InvokeVoidAsync("takeOver", _next);
    }

    protected override async Task OnInitializedAsync()
    {
        _all = await MenuService.GetAll();
    }

    public async void OnVote(Vote vote)
    {
        if (AuthService.IdToken == null)
        {
            _isSigningIn = true;
            StateHasChanged();
            return;
        }
        await VoteService.Vote(vote);
        _all = await MenuService.GetAll();
        StateHasChanged();
        await JsRuntime.InvokeVoidAsync("window.onscroll", null);
    }

    [JSInvokable]
    public void OnScrolled(ScrollData scrollData)
    {
        _selectedIndex = scrollData.SelectedIndex;
        _labelHeights = scrollData.LabelHeights;
        _contentHeights = scrollData.ContentHeights;
        _visibleIndexes = scrollData.VisibleIndexes;
        StateHasChanged();
    }

    public record struct ScrollData(int SelectedIndex, int[] VisibleIndexes, double[] LabelHeights, double[] ContentHeights);

}