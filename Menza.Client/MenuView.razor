@using System.Globalization
@using Menza.Shared

<div style="padding: 16px" class="@(IsNext ? "" : "closed")">
    <div @ref="_elementReference" class="surface">
        <div class="date-and-menu">
            @if (IsNext)
            {
                if (Menu.Date == DateOnly.FromDateTime(DateTime.Today))
                {
                    @:Mai ebéd
                }
                else
                {
                    @:Következő ebéd - @Menu.Date.ToLongDateString()
                }
            }
            else
            {
                @Menu.Date.ToLongDateString()
            }
            <div>
                <b>@Menu.Menu</b>
            </div>
        </div>
        @if (Menu.Rating.HasValue)
        {
            double x = Menu.Rating.Value;
            <div class="fade-in" style="font-variation-settings: 'FILL' 1; color: var(--color-primary); height: 30px">
                @for (; x > .75; x--)
                {
                    <span class="material-symbols-rounded">
                        star
                    </span>
                }
                @if (x > .25)
                {
                    <span class="material-symbols-rounded">
                        star_half
                    </span>
                }
            </div>
        }

        <div class="hidden">
            <div>
                <div style="padding-top: 24px">
                    @if (new DateTime(Menu.Date.Year, Menu.Date.Month, Menu.Date.Day, 11, 35, 0) < DateTime.Now)
                    {
                        @:Szerinted milyen volt?
                    }
                    else
                    {
                        @:Szerinted milyen lesz?
                    }
                </div>
                <div style="height: 24px">
                    <button class="rating-button @(GetIsActive(1))" @onclick="@(() => Vote(1))">
                        <i class="material-symbols-rounded">sentiment_very_dissatisfied</i>
                    </button>
                    <button class="rating-button @(GetIsActive(2))" @onclick="@(() => Vote(2))">
                        <i class="material-symbols-rounded">sentiment_dissatisfied</i>
                    </button>
                    <button class="rating-button @(GetIsActive(3))" @onclick="@(() => Vote(3))">
                        <i class="material-symbols-rounded">sentiment_neutral</i>
                    </button>
                    <button class="rating-button @(GetIsActive(4))" @onclick="@(() => Vote(4))">
                        <i class="material-symbols-rounded">sentiment_satisfied</i>
                    </button>
                    <button class="rating-button @(GetIsActive(5))" @onclick="@(() => Vote(5))">
                        <i class="material-symbols-rounded">sentiment_very_satisfied</i>
                    </button>
                </div>
                @if (Menu.Rating.HasValue)
                {
                    <div style="margin-top: 16px">
                        Átlag: @Menu.Rating.Value.ToString("0.0") (@Menu.VoteCount szavazat)
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private ElementReference _elementReference;
    private bool _firstRender = true;

    [Parameter]
    public Action<ElementReference>? Rendered { get; set; }

    [Parameter]
    public bool IsNext { get; set; }

    [Parameter]
    [EditorRequired]
    public MenuAndVotes Menu { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public Action<Vote> OnVote { get; set; } = null!;

    protected override void OnAfterRender(bool firstRender)
    {
        _firstRender = firstRender;
        if (firstRender)
            Rendered?.Invoke(_elementReference);
    }

    private void Vote(byte rating) => OnVote(new(Menu.Date, rating));

    private string? GetIsActive(int rating)
    {
        if (!Menu.MyVote.HasValue) return null;
        bool isActive = Math.Abs(Menu.MyVote.Value - rating) < 0.5;
        return isActive ? "active" : null;
    }
}