@using System.Globalization
@using Menza.Shared

<div class="block" id="@(IsNext ? "next" : null)">
    <div class="surface card">
        <div>
            @if (IsNext)
            {
                @if (Menu.Date == DateOnly.FromDateTime(DateTime.Today))
                {
                    <span class="highlight">
                        Mai ebéd
                    </span>
                }
                else
                {
                    <span class="highlight">
                        Következő ebéd
                    </span>
                    @Menu.Date.ToLongDateString()
                }
            }
            else
            {
                @Menu.Date.ToLongDateString()
            }
            <div>
                <b>@Menu.Menu</b>
            </div>
        </div>
        @if (Menu.Rating.HasValue)
        {
            double x = Menu.Rating.Value;
            @for (; x > .75; x--)
            {
                <star>star</star>
            }
            @if (x > .25)
            {
                <star>star_half</star>
            }
        }

        <div class="collapse">
            <div>
                @if (!IsPrerendering)
                {
                    <div style="padding-top: 24px">
                        @if (new DateTime(Menu.Date.Year, Menu.Date.Month, Menu.Date.Day, 11, 35, 0) < DateTime.Now)
                        {
                            @:Szerinted milyen volt?
                        }
                        else
                        {
                            @:Szerinted milyen lesz?
                        }
                    </div>
                    <div class="rating-buttons icon-group">
                        <InputRadioGroup TValue="byte" @bind-Value="@_rating" @bind-Value:after="Rate">
                            <label>
                                <InputRadio Value="1" TValue="byte"/>
                                <icon>sentiment_very_dissatisfied</icon>
                            </label>
                            <label>
                                <InputRadio Value="2" TValue="byte"/>
                                <icon>sentiment_dissatisfied</icon>
                            </label>
                            <label>
                                <InputRadio Value="3" TValue="byte"/>
                                <icon>sentiment_neutral</icon>
                            </label>
                            <label>
                                <InputRadio Value="4" TValue="byte"/>
                                <icon>sentiment_satisfied</icon>
                            </label>
                            <label>
                                <InputRadio Value="5" TValue="byte"/>
                                <icon>sentiment_very_satisfied</icon>
                            </label>
                        </InputRadioGroup>
                    </div>
                    @if (Menu.Rating.HasValue)
                    {
                        <div style="margin-top: 16px">
                            Átlag: @Menu.Rating.Value.ToString("0.0") (@Menu.RatingCount szavazat)
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private byte _rating;

    [Parameter]
    public bool IsNext { get; set; }

    [Parameter]
    [EditorRequired]
    public MenuAndRating Menu { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public bool IsPrerendering { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<Rating, bool> SaveRating { get; set; } = null!;

    protected override void OnParametersSet()
    {
        _rating = Menu.MyRating ?? 0;
    }

    private void Rate()
    {
        bool saved = SaveRating(new(Menu.Date, _rating));
        if (!saved) return;

        if (!Menu.Rating.HasValue)
        {
            Menu.Rating = _rating;
            Menu.MyRating = _rating;
            Menu.RatingCount = 1;
        }
        else
        {
            double sum = Menu.Rating.Value * Menu.RatingCount;
            if (Menu.MyRating.HasValue)
            {
                sum -= Menu.MyRating.Value;
                Menu.RatingCount--;
            }
            sum += _rating;
            Menu.RatingCount++;
            Menu.Rating = sum / Menu.RatingCount;
            Menu.MyRating = _rating;
        }
        StateHasChanged();
    }

    private string? GetIsActive(int rating)
    {
        if (!Menu.MyRating.HasValue) return null;
        bool isActive = Math.Abs(Menu.MyRating.Value - rating) < 0.5;
        return isActive ? "active" : null;
    }

}