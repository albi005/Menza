@using System.Globalization
@using Menza.Shared

<div class="block" id="@(IsNext ? "next" : null)">
    <div class="surface card">
        <div>
            @if (IsNext)
            {
                if (Menu.Date == DateOnly.FromDateTime(DateTime.Today))
                {
                    <span style="
                        background-color: var(--color-primary);
                        color: white;
                        border-radius: 14px;
                        padding: 2px 8px;
                        margin-bottom: 4px;
                        display: inline-block">
                        Mai ebéd
                    </span>
                }
                else
                {
                    @:Következő ebéd - @Menu.Date.ToLongDateString()
                }
            }
            else
            {
                @Menu.Date.ToLongDateString()
            }
            <div>
                <b>@Menu.Menu</b>
            </div>
        </div>
        @if (Menu.Rating.HasValue)
        {
            double x = Menu.Rating.Value;
            <div class="@(IsNext ? "animate-height" : null)" style="font-variation-settings: 'FILL' 1; color: var(--color-rating); height: 30px">
                @for (; x > .75; x--)
                {
                    <span class="material-symbols-rounded">
                        star
                    </span>
                }
                @if (x > .25)
                {
                    <span class="material-symbols-rounded">
                        star_half
                    </span>
                }
            </div>
        }

        <div class="collapse">
            <div>
                <div style="padding-top: 24px">
                    @if (new DateTime(Menu.Date.Year, Menu.Date.Month, Menu.Date.Day, 11, 35, 0) < DateTime.Now)
                    {
                        @:Szerinted milyen volt?
                    }
                    else
                    {
                        @:Szerinted milyen lesz?
                    }
                </div>
                <div style="height: 24px">
                    <button class="rating-button @(GetIsActive(1))" @onclick="@(() => Rate(1))">
                        <i class="material-symbols-rounded">sentiment_very_dissatisfied</i>
                    </button>
                    <button class="rating-button @(GetIsActive(2))" @onclick="@(() => Rate(2))">
                        <i class="material-symbols-rounded">sentiment_dissatisfied</i>
                    </button>
                    <button class="rating-button @(GetIsActive(3))" @onclick="@(() => Rate(3))">
                        <i class="material-symbols-rounded">sentiment_neutral</i>
                    </button>
                    <button class="rating-button @(GetIsActive(4))" @onclick="@(() => Rate(4))">
                        <i class="material-symbols-rounded">sentiment_satisfied</i>
                    </button>
                    <button class="rating-button @(GetIsActive(5))" @onclick="@(() => Rate(5))">
                        <i class="material-symbols-rounded">sentiment_very_satisfied</i>
                    </button>
                </div>
                @if (Menu.Rating.HasValue)
                {
                    <div style="margin-top: 16px">
                        Átlag: @Menu.Rating.Value.ToString("0.0") (@Menu.RatingCount szavazat)
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsNext { get; set; }

    [Parameter]
    [EditorRequired]
    public MenuAndRating Menu { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public Func<Rating, bool> SaveRating { get; set; } = null!;

    private void Rate(byte rating)
    {
        bool saved = SaveRating(new(Menu.Date, rating));
        if (!saved) return;
        
        if (!Menu.Rating.HasValue)
        {
            Menu.Rating = rating;
            Menu.MyRating = rating;
            Menu.RatingCount = 1;
        }
        else
        {
            double sum = Menu.Rating.Value * Menu.RatingCount;
            if (Menu.MyRating.HasValue)
            {
                sum -= Menu.MyRating.Value;
                Menu.RatingCount--;
            }
            sum += rating;
            Menu.RatingCount++;
            Menu.Rating = sum / Menu.RatingCount;
            Menu.MyRating = rating;
        }
        SaveRating(new(Menu.Date, rating));
        StateHasChanged();
    }

    private string? GetIsActive(int rating)
    {
        if (!Menu.MyRating.HasValue) return null;
        bool isActive = Math.Abs(Menu.MyRating.Value - rating) < 0.5;
        return isActive ? "active" : null;
    }
}