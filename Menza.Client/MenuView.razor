@using System.Globalization
@using Menza.Shared

<div class="block" id="@(IsNext ? "next" : "menu" + Menu.Date.ToString("yyMMdd"))">
    <div class="surface card">
        <div>
            @if (IsNext && Menu.Date >= DateOnly.FromDateTime(DateTime.Today))
            {
                @if (Menu.Date == DateOnly.FromDateTime(DateTime.Today))
                {
                    <span class="highlight">
                        Mai ebéd
                    </span>
                }
                else
                {
                    <span class="highlight">
                        Következő ebéd
                    </span>
                    @Menu.Date.ToLongDateString()
                }
            }
            else
            {
                @Menu.Date.ToLongDateString()
            }
            <div>
                <b>@Menu.Menu</b>
            </div>
        </div>
        @if (Menu.Rating.HasValue)
        {
            double x = Menu.Rating.Value;
            @for (; x > .75; x--)
            {
                <star>star</star>
            }
            @if (x > .25)
            {
                <star>star_half</star>
            }
        }

        <div class="collapse">
            <div>
                @if (!IsPrerendering)
                {
                    <div style="padding-top: 24px">
                        @if (new DateTime(Menu.Date.Year, Menu.Date.Month, Menu.Date.Day, 11, 35, 0) < DateTime.Now)
                        {
                            @:Szerinted milyen volt?
                        }
                        else
                        {
                            @:Szerinted milyen lesz?
                        }
                    </div>
                    <div class="rating-buttons icon-group">
                        <icon class="@(GetIsChecked(1))" @onclick="@(() => Rate(1))">sentiment_very_dissatisfied</icon>
                        <icon class="@(GetIsChecked(2))" @onclick="@(() => Rate(2))">sentiment_dissatisfied</icon>
                        <icon class="@(GetIsChecked(3))" @onclick="@(() => Rate(3))">sentiment_neutral</icon>
                        <icon class="@(GetIsChecked(4))" @onclick="@(() => Rate(4))">sentiment_satisfied</icon>
                        <icon class="@(GetIsChecked(5))" @onclick="@(() => Rate(5))">sentiment_very_satisfied</icon>
                    </div>
                    @if (Menu.Rating.HasValue)
                    {
                        <div style="margin-top: 16px">
                            Átlag: @Menu.Rating.Value.ToString("0.0") (@Menu.RatingCount szavazat)
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsNext { get; set; }

    [Parameter]
    [EditorRequired]
    public MenuAndRating Menu { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public bool IsPrerendering { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<Rating, bool> SaveRating { get; set; } = null!;

    private void Rate(byte rating)
    {
        bool saved = SaveRating(new(Menu.Date, rating));
        if (!saved)
            return;

        if (!Menu.Rating.HasValue)
        {
            Menu.Rating = rating;
            Menu.MyRating = rating;
            Menu.RatingCount = 1;
        }
        else
        {
            double sum = Menu.Rating.Value * Menu.RatingCount;
            if (Menu.MyRating.HasValue)
            {
                sum -= Menu.MyRating.Value;
                Menu.RatingCount--;
            }
            sum += rating;
            Menu.RatingCount++;
            Menu.Rating = sum / Menu.RatingCount;
            Menu.MyRating = rating;
        }
        StateHasChanged();
    }

    private string? GetIsChecked(int rating)
    {
        if (!Menu.MyRating.HasValue) return null;
        bool isActive = Math.Abs(Menu.MyRating.Value - rating) < 0.5;
        return isActive ? "checked" : null;
    }

}