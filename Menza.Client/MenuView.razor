@using System.Globalization
@using Menza.Shared

@{
    string height = LabelHeight.HasValue
        ? (Selected ? ContentHeight!.Value : LabelHeight.Value)
            .ToString(CultureInfo.InvariantCulture) + "px"
        : "unset";
    string shadow = Selected
        ? "4px 8px 17px rgba(0, 0, 0, .3)"
        : "none";
    string backgroundColor = Selected
        ? "white"
        : "transparent";
    string transition = _firstRender
        ? "none"
        : "background-color .25s, box-shadow .25s";
}

<div @ref="_elementReference" class="surface" style="
    max-width: 432px;
    margin: 16px;
    transition: @transition;
    background-color: @backgroundColor;
    box-shadow: @shadow">
    <div style="overflow: hidden; height: @height; transition: height .25s linear">
        <div class="content">
            <div class="date-and-menu">
                <span id="label">
                    @if (IsNext)
                    {
                        if (Menu.Date == DateOnly.FromDateTime(DateTime.Today))
                        {
                            @:Mai ebéd
                        }
                        else
                        {
                            @:Következő ebéd - @Menu.Date.ToLongDateString()
                        }
                    }
                    else
                    {
                        @Menu.Date.ToLongDateString()
                    }
                    @if (Menu.Rating.HasValue)
                    {
                        <div>
                            @for (int i = 0; i < Menu.Rating; i++)
                            {
                                <span class="material-symbols-rounded" style="align-self: center">
                                    star
                                </span>
                            }
                        </div>
                    }
                </span>
                <div>
                    <b>@Menu.Menu</b>
                </div>
            </div>
            @if (IsVisible)
            {
                <div style="margin-top: 8px">
                    @if (new DateTime(Menu.Date.Year, Menu.Date.Month, Menu.Date.Day, 11, 35, 0) < DateTime.Now)
                    {
                        @:Szerinted milyen volt?
                    }
                    else
                    {
                        @:Szerinted milyen lesz?
                    }
                </div>
                <div class="rating" style="height: 24px">
                    <button class="rating-button @(Menu.MyVote == 1 ? "active" : null)" @onclick="@(() => Vote(1))">
                        <i class="material-symbols-rounded">sentiment_very_dissatisfied</i>
                    </button>
                    <button class="rating-button @(Menu.MyVote == 2 ? "active" : null)" @onclick="@(() => Vote(2))">
                        <i class="material-symbols-rounded">sentiment_dissatisfied</i>
                    </button>
                    <button class="rating-button @(Menu.MyVote == 3 ? "active" : null)" @onclick="@(() => Vote(3))">
                        <i class="material-symbols-rounded">sentiment_neutral</i>
                    </button>
                    <button class="rating-button @(Menu.MyVote == 4 ? "active" : null)" @onclick="@(() => Vote(4))">
                        <i class="material-symbols-rounded">sentiment_satisfied</i>
                    </button>
                    <button class="rating-button @(Menu.MyVote == 5 ? "active" : null)" @onclick="@(() => Vote(5))">
                        <i class="material-symbols-rounded">sentiment_very_satisfied</i>
                    </button>
                </div>
                @if (Menu.Rating.HasValue)
                {
                    <div style="margin-top: 16px">
                        Átlag: @Menu.Rating (összesen @Menu.VoteCount darab szavazat)
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private ElementReference _elementReference;
    private bool _firstRender = true;

    [Parameter]
    public Action<ElementReference>? Rendered { get; set; }

    [Parameter]
    public bool IsNext { get; set; }

    [Parameter]
    public bool Selected { get; set; }

    [Parameter]
    public double? LabelHeight { get; set; }

    [Parameter]
    public double? ContentHeight { get; set; }
    
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    [EditorRequired]
    public MenuAndVotes Menu { get; set; } = null!;
    
    [Parameter]
    [EditorRequired]
    public Action<Vote> OnVote { get; set; } = null!;

    protected override void OnAfterRender(bool firstRender)
    {
        _firstRender = firstRender;
        if (firstRender)
            Rendered?.Invoke(_elementReference);
    }
    
    private void Vote(int rating)
    {
        Menu.MyVote = rating;
        OnVote(new(Menu.Date, rating));
        StateHasChanged();
    }

}