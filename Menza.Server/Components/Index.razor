@page "/"
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Menza</title>
    <base href="/"/>
    <link href="styles.css" rel="stylesheet"/>
    <link rel="icon" type="image/x-icon" href="favicon.ico"/>

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Nunito:wght@200..1000&display=swap">
    <link rel="stylesheet"
          href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@48,300..600,0..1,0"/>

    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#869316">
    <meta name="theme-color" content="#f5f5dc">

    <HeadOutlet @rendermode="InteractiveWebAssembly"/>
</head>

<body>

<App @rendermode="InteractiveWebAssembly" />

<script>
    function scrollToNext(behavior) {
        let next = document.getElementById('next');
        if (!next) return;
        document.firstElementChild.scroll({
            behavior,
            top: next.offsetTop + next.clientHeight/2 - window.innerHeight/2
        });
    }
    window.scrollToNextMenu = _ => scrollToNext('smooth');
    
    scrollToNext('auto');

    let highlightedCardStyleElement = document.createElement('style');
    document.head.appendChild(highlightedCardStyleElement);
    
    function setHighlight(card) {
        highlightedCardStyleElement.innerHTML = `
            #${card.id} .card {
              background-color: white;
              box-shadow: var(--shadow-3);
              z-index: 0;
            }
            #${card.id} .card .collapse {
              height: ${card.querySelector('.collapse')?.children[0].clientHeight}px;
            }
        `;
    }
    
    const observer = new IntersectionObserver(entries => {
        for (const entry of entries) {
            if (entry.isIntersecting) {
                setHighlight(entry.target);
            }
            
            if (entry.target.id === 'next') {
                let scrollToNextMenuButton = document.getElementById('scrollToNextMenuButton');
                if (scrollToNextMenuButton) {
                    let showScrollToNextMenuButton = !entry.isIntersecting;
                    scrollToNextMenuButton.style.display = showScrollToNextMenuButton ? 'block' : 'none';
                }
            }
        }
    }, {
        root: document,
        rootMargin: "-50% 0px -50% 0px",
    });
    function observe() {
        for (const element of document.getElementById('list').children) {
            observer.observe(element);
        }
    }
    observe();
    
    document.addEventListener('DOMContentLoaded', _ => {
      const style = document.createElement('style');
      style.innerHTML = `
        .card {
          transition: background-color 0.25s, box-shadow 0.25s;
        }
      `;
      document.head.appendChild(style);
    });
    
    function onRate(menuId) {
        console.log('onRate', menuId);
        let menu = document.getElementById(menuId);
        let stars = menu.querySelectorAll('star');
        for (const star of stars) {
            star.style.fontSize = '24px';
        }
        menu.classList.remove('expand-stars');
        menu.classList.add('no-star');
        requestAnimationFrame(_ => {
            menu.classList.add('expand-stars');
            setHighlight(menu);
        });        
    }
</script>

<div id="blazor-error-ui">
    Valami nem jó.
</div>

<script src="_framework/blazor.web.js" autostart="false"></script>
<script type="module">
    import { getAccessToken, signOut, signIn, registerOnAccessTokenChanged } from "./auth.js";
    
    async function registerCredentialHandler(authService) {
        registerOnAccessTokenChanged(async token => {
            await authService.invokeMethodAsync('HandleCredential', token);
        });
    }
    
    window.auth = {
        getAccessToken,
        registerCredentialHandler,
        signIn,
        signOut,
    };
</script>
<script>
    Blazor.start();
</script>
</body>

</html>